*************************
Writing Plugins for Youpi
*************************

.. warning:: Most of this chapter is currently being rewritten; some parts are 
             obsolete for the moment.

This section is focusing on the processing capabilities of Youpi and aims to be 
a short guideline - by providing useful background information - to the software 
developper that needs to understand, improve and write processing plugins for Youpi.


Plugin Concept Overview
=======================

Plugins are computer programs that interact with a host application to provide 
specific on-demand new features. In order to be a rather generic pipeline for 
processing astronomical data, Youpi - which is powered by |django|_, an open source 
web application framework that uses the Python programming language - has been 
designed to allow custom programs to operate a wide range of processings on data. 

For this purpose, Youpi comes with an easy and convenient API allowing third-party 
developpers to extend its standard functionalities.

Basically, a Youpi processing plugin is made of *four distinct files*. One of them is a 
Python script used for all server-side actions, such as (but not limited to) database 
interactions, variables or constants you would like |django|_ to substitute in your HTML 
templates, and class member methods you would like to be available to the public 
interface of your plugin (so you can call them using AJAX calls from your Javascript 
files). The remaining three files are client-side related: a Javascript file holding 
all your client-side routines and two HTML templates files for rendering the plugin on 
the processing page and rendering the plugin related items in the processing cart 
respectively. Finally, when you are done writting your new plugin, the |pm| will find, 
register and load your code into Youpi's processing data structure. 

But first, let's begin with a simple example.

.. _hello_world_tutorial:

Hello, world!
=============

This short tutorial will guide you into the process of creating a simple plugin that will 
do nothing useful but running a ``uname -a`` shell command on your Condor cluster. You will 
learn how to start with the right set of files - because you don't need to start from 
scratch  - and make minor modifications to get your new plugin work smoothly within Youpi.

Youpi comes with a ``skeleton`` plugin that is designed to provide all the mandatory data 
structures needed to build a working plugin. In a default configuration environment, the 
|pm| does not load it since its name is not part of the ``YOUPI_ACTIVE_PLUGINS`` list. You 
can load by updating your ``settings.py`` or ``local_conf.py`` configuration file with the 
following statement::

	YOUPI_ACTIVE_PLUGINS = ('skeleton', 'qualityfitsin', 'scamp', 'swarp', 'sextractor')

Once loaded, the ``skeleton`` plugin is available on Youpi's *processing page* and you should 
see its "Skel" icon in the bottom right corner of the available processings list. The purpose 
of this plugin is to submit five ``uptime`` shell commands to the cluster. You can add a 
``skeleton`` job to the processing cart by clicking on the "Add to cart" button. As we may expect, 
the plugin fully integrates with the processing cart and Condor. From the processing cart, you 
can save this job for later processing or submit it to the cluster.

That said, let's concentrate on our new plugin. Since the ``uname -a`` command displays 
information about UNIX systems, we will call it ``system``. This value will be used as an 
internal name: it's a unique plugin identifier keyword.

Let's set up the directory structure by duplicating all ``skeleton``'s files located in the 
``$YOUPI_INSTALL_DIR/terapix/templates/plugins`` directory::

	$ cp skeleton.js system.js
	$ cp skeleton.html system.html
	$ cp skeleton_item_cart.html system_item_cart.html 

Then duplicate the server-side code from the ``$YOUPI_INSTALL_DIR/terapix/youpi/plugins`` 
directory::

	$ cp skeleton.py system.py

Edit your ``system.py`` file and perform the following changes:

- Rename ``Skeleton`` class to ``System``
- Change the following attributes to match the new ``system`` plugin::

	self.id =  'system' # This is your internal plugin id. It must be unique accross all plugins in use.
	self.description = 'System tutorial'
	self.optionLabel = 'My first plugin'
	self.itemPrefix = 'SYS' # Used to prefix processing cart items name
	# Now set source file names
	self.template = 'plugins/system.html' # Main template, rendered in the processing page
	self.itemCartTemplate = 'plugins/system_item_cart.html' # Template for custom rendering into the processing cart
	self.jsSource = 'plugins/system.js' # Custom javascript
	self.jobCount = 10 # Will queue 10 jobs on the cluster
	# The actual command to perform
	self.command = 'uname -a'

You also have to edit both ``system.html`` and ``system_item_cart.html`` templates and set some 
appropriate descriptions by replacing the actual ``<p>`` HTML elements with::

	<p>Add system jobs to the cart</p> # in system.html
	<p>This is a system job</p>        # in system_item_cart.html

Also update your ``system.js`` file by renaming the global variable ``uidskel`` (located at the 
top of the file) with ``uidsystem``::

	/* global */
	var uidsystem = '{{ plugin.id }}';

Next, activate your new plugin by editing your ``settings.py`` (or ``local_conf.py`` depending 
on your installation)::

	YOUPI_ACTIVE_PLUGINS = ('system', 'skeleton', 'qualityfitsin', 'scamp', 'swarp', 'sextractor')

Finally, run the ``checksetup.py`` script to ensure your plugin is registered into the database::

	$ python manage.py checksetup

That's it. Your plugin should be available on the the processing page. Just point your browser 
to ``/youpi/processing/``.

Naming Conventions
==================

Let us have a brief discussion about naming policy related to Youpi plugin development. All 
your plugins related files must live in two places (only those paths will be searched 
for file inclusion), either in the ``terapix/templates/plugins/`` or ``terapix/youpi/plugins/`` 
directory:

- The ``templates`` directory is the one which should hold all your HTML and JavaScript 
  client-side template files. In the previous :ref:`hello_world_tutorial` section, we created a 
  simple plugin named ``system``. In order to respect Youpi naming policy, every plugin must 
  define three template files::

	templates/plugins/system_item_cart.html
	templates/plugins/system.html
	templates/plugins/system.js

  Files in this directory get substituted by |django| before client-side rendering. 
  One might wonder why every plugin's JavaScript file is in there too and why it needs 
  to be substituted. The reason for this rather unexpected location (it should 
  preferably belong to the ``media/js`` directory, defined to be the location 
  holding all JavaScript-related files) is that server-side |django| substitution 
  is required at several places in order to make the plugin system working properly. 

  As of today, three template files include your plugin's source code directly in their 
  body:

  ========================== =========================== =============================================================
  Template file              Included file argument      Purpose
  ========================== =========================== =============================================================
  ``processing_plugin.html`` ``plugin.jsSource``         Plugin's javascript code and
                             ``plugin.template``         plugin HTML template for rendering on the processing page
  ``single_result.html``     ``plugin.jsSource``         Plugin javascript code
  ``processingcart.html``    ``plugin.jsSource``         Plugin's javascript code and
                             ``plugin.itemCartTemplate`` plugin HTML template for rendering items in the processing cart
  ========================== =========================== =============================================================

  In the ``processingcart.html`` template for example, the plugin's ``jsSource`` javascript file 
  and ``itemCartTemplate`` are included using the ``include`` tag when |django| wants to render 
  the processing cart template. The ``include`` statement is a |django|'s built-in template tag 
  which loads a template file and renders it *with the current context* so that variables in the 
  current context can be substituted in every plugin's templates. Since the ``plugin`` variable is 
  a Python object (which inherits the ``ProcessingPlugin`` class), |django|'s template system is 
  able to access all its data members. 

- The ``youpi/plugins/`` directory, which should hold your server-side Python script. 
  There is no particular naming policy since all Python files that belongs to this 
  directory are parsed and registered by the |pm| automatically. For example, default plugin 
  Python filenames are among the following::

	youpi/plugins/qualityfitsin.py
	youpi/plugins/qualityfitsout.py
	youpi/plugins/sextractor.py
	youpi/plugins/scamp.py
	youpi/plugins/swarp.py
	youpi/plugins/skel.py

.. note:: As a general rule, you should follow the coding style used in the ``skeleton`` plugin.

Most importantly, every plugin's javascript ``jsSource`` code should basically have the same 
overall structure than the one provided by ``skeleton``::

	/* global variable (name must be unique): 'uid' + plugin.id */
	var uidsystem = '{{ plugin.id }}';

	// This is the main plugin object, acting as a function container
	var {{ plugin.id }} = {
		// Variables
		var1: val1,
		...
		// Functions
		function1: function() {},
		function2: function() {},
		...
		functionn: function() {}
	};

Following this structure will ensure that Youpi is able to find the :ref:`minimal_set_functions` 
(we will talk about that later) needed in order for your plugin to integrate properly with it.


About Ajax Calls
================

For enhanced client-server interactions, you will certainly want to use the usefull 
XHR facility provided by JavaScript. Sending asynchronous queries to a server allows 
to do powerful things inside your client scripts, such as manipulating the DOM [#DOM]_ 
according to the response received by the XHR query.

If you are dealing with AJAX calls in Youpi, your are advised to use the simple 
``HttpRequest`` object defined in ``media/js/xhr.js`` file. It works as a wrapper with 
convenient methods and provides a very simple API with some useful callback mechanisms 
for error and result handling. As you can see, its use is rather straightforward::

	<script type="text/javascript" src="/media/js/xhr.js"></script>
	<div id="container"></div>

	<script type="text/javascript">
	  var r = new HttpRequest(
		'container',
		null,
		function(resp) { 
		  var data = resp.result;
		}
	  );

	  var post = {
	    Key1: int1,
	    Key2: 'str2'
	  };
	  r.send('/uri/to/server/', $H(post).toQueryString());
	</script>

First, you have to set an HTML ``div`` element which acts like a block container. 
It is only used to display some kind of "Data loading, please wait..." message
while waiting for incoming data.  Set this parameter to ``null`` if you want no 
"loading..." message to be displayed. The ``div``'s ``id`` must be unique in the 
document.

The second parameter of ``HttpRequest`` is set to ``null`` to indicate that no custom 
error handler is defined, so the default one -- displaying an error message embedded 
into the ``div`` container -- will be used instead.

The last argument is about handling results. You should define a callback function 
with only one argument. This function prototype has to be used every time you want 
to access your results.  Once the ``HttpRequest`` object gets a successful response from 
the server, it passes an evaluation of the returned data to your custom handler code. 
Your data, if any, will always be accessible through the content of ``resp.result`` 
and can be of any supported JavaScript type.

You can optionally set POST data parameters -- in the example ``Key1`` and ``Key2`` -- 
and send them by calling the ``send()`` method. Youpi's ``HttpRequest`` object only supports 
POST HTTP requests; the ``Content-type`` request header is always set to 
``application/x-www-form-urlencoded``. Thus, you can submit optional POST data as a second 
parameter to its ``send()`` function, which actually sends the query to the server.

On the server-side part, Youpi provides a way to call a specific member method in your 
Python plugin code from your plugin's JavaScript code. A dedicated |django|'s URL has been 
defined for that purpose and serves as a *unique entry point*, so that you can use it to 
access any member method of any available plugin. 

Let's have a look at its definition in ``urls.py``::

	(r'^youpi/process/plugin/$', 'processing_plugin')

This line explicitely maps the ``/youpi/process/plugin/`` URL to the server-side 
``processing_plugin()`` |django|'s callback function defined in ``views.py``::

	def processing_plugin(request):
	  try:
  	    pluginName = request.POST['Plugin']
	    method = request.POST['Method']
	  except Exception, e:
	    return HttpResponseBadRequest('Incorrect POST data')

	plugin = manager.getPluginByName(pluginName)
	try:
	  res = eval('plugin.' + method + '(request)')
	except AttributeError:
	  raise PluginError, "Plugin '%s' has no method '%s'" % (plugin.id, method)

	# Response must is a JSON object
	return HttpResponse(json.encode({'result': res}), mimetype = 'text/plain')

The ``processing_plugin()`` function is defined as a |django| *view function* which 
is a Python function that takes a web request -- an ``HttpRequest`` object -- as first argument 
and returns a web response -- ``HttpResponse`` object. The ``request`` variable is an 
``HttpRequest`` instance that holds really useful information such as the HTTP method used 
in the request, GET or POST data parameters, all HTTP headers, session and currently logged-in 
user data. 

``Plugin`` and ``Method`` are required POST parameters. The former is the plugin's 
identifier, the latter your plugin's method member that is to be executed. So, in 
order to be able to call a plugin method from your Javascript snippet, you *must* 
provide POST data to the ``send()`` function with at least the plugin name and method 
name you want to reach::

	var r = new HttpRequest(
	  ...
	);

	var post = {
	  // Required
	  Plugin: 'plugin_id',
	  Method: 'plugin_method',
	  // Optional
	  Key1: int1,
	  ...
	  Key2: 'str2'
	};
	r.send('/youpi/process/plugin/', $H(post).toQueryString());

As you can see in the ``eval()`` function call, the ``request`` variable is passed to 
any plugin method so that you can access easily request data parameters from your plugin
code. 

Finally, the ``processing_plugin()`` function returns a  JSON [#JSON]_ object. You can then 
access the data through the ``resp.result`` variable.

Also, note that the JSON response is well suited for transmitting structured data over a 
network connection and can be natively processed by JavaScript within your callback response 
handler::

	function myHandler(resp) {
		var data = resp.result;
		// Now data is (have to be) a JSON object ready for processing
		...
	}

Thus, in order for your response to be parsed and processed successfully at client-side 
level, every plugin's method have to return a JSON-aware **Python dictionary** that will be 
finally formatted to a JSON object by the ``processing_plugin()`` method (by returning an 
``HttpResponse`` whose data is JSON encoded with the ``json.encode(...)`` statement).

.. rubric:: Footnotes

.. [#DOM] The Document Object Model is fully implemented in recent versions of 
          JavaScript and is supported in almost all today's web browsers 
.. [#JSON] JavaScript Object Notation data-interchange format


.. _minimal_set_functions:

Minimal Set of Mandatory Functions
==================================

*TBW*

Active Monitoring Interface Integration
=======================================

Youpi comes with a built-in job monitoring web interface, the *Active Monitoring Interface*
(AMI for short), that allows realtime monitoring of all Youpi-related jobs running 
on the Condor cluster. Each entry (one entry per job) gives information about:

- the *Condor job's ID* which identifies a job uniquely on the cluster
- the *Youpi's job owner* which is the username of the Youpi's account that initiated 
  the job. 

  .. note:: this is *not* the same as the UNIX user that executes Condor jobs on the cluster. 
            Youpi's job owner is the login name - stored in the database - of the registered 
            account that submitted the job through the web interface.

- the kind of processing being made with a *short one-line description*
- the *remote cluster host* where the job is running
- the *elapsed time* since job submission
- the *Condor job's status* on the cluster. A job can be marked as ``Idle`` if it is 
  part of the queue, waiting for available resources (that matches its execution requirements) 
  in order to run, or marked as ``Running`` if it is effectively executing on a node, or 
  marked as ``Hold`` if Condor caught some exception while trying to terminate and release 
  the job. A job that terminates with errors will not be part of Condor's queue anymore 
  and will disappear from Youpi's *AMI* too.  There will be *no error reporting* through 
  the *AMI*. In such cases, the user will have to check Condor's error log files manually, 
  which is not very user-friendly. Therefore, suitable error handling should be added to 
  your code to catch exceptions and avoid this situation.

The *AMI* periodically monitors the XML output of the ``condor_q`` command. Almost all 
previously mentionned information is retreived while parsing the XML data except for the 
*Youpi's job owner* and the *short one-line description* fields, which are not Condor-related 
information but instead Youpi-related user data. Thus, in order to make your plugin support 
the AMI, special care must be taken when dealing with CSF generation within your scripts.

Passing extra user data to Condor is achieve by defining the ``SPICA_USER_DATA`` environment 
variable in the CSF. Its content has to be a base64-encoded serialized Python dictionary 
with at least the two mandatory keys ``Descr`` that stands for ``description`` and 
``UserID``, which is the Django unique user identifier (in fact, there is a third mandatory 
key, ``Kind``, that we will discuss shortly)::

	userData = {
	  'Descr' : "%s of" % self.optionLabel,
	  'UserId': request.user.id,
	  # This dictionary can contain any kind of Python data
	  'OtherData' : [] 
	}

	# CSF generation
	csf = """
	executable  = mybin
	universe    = vanilla
	environment = SPICA_USER_DATA=%s
	...
	""" % base64.encodestring(marshal.dumps(userData)).replace('\n', '')

	# Submit the job on Condor
	pipe = os.popen("%s/condor_submit %s 2>&amp;1" % (CONDOR_PATH, csf))
	data = pipe.readlines()
	pipe.close()


Also, note that the presence of the ``YOUPI_USER_DATA`` environment variable ensures 
that only Youpi related jobs are filtered and monitored. Other Condor jobs will not 
be monitored by the *AMI*.


Wrap Your Cluster Code!
=======================

Every built-in Youpi plugin that initiates jobs on the Condor cluster keeps track of 
various processing information by storing it into the database. The ``youpi_processing_task``
MySQL table holds information about a job exit status, the user that initiated the job, 
the kind of processing performed, start and end times, the cluster node used for processing 
data and the complete error log content if ``success`` is null.

If your plugin is designed to send jobs to the Condor cluster, you may find useful to 
use the ``wrapper_processing.py`` wrapper script provided with the distribution. Without 
it, it would be rather difficult to get accurate information about a processing task 
executing on a cluster's node. Moreover, getting the task's exit code would not be easy 
either as you would have to parse Condor log files. 

The ``wrapper_processing.py`` script will help you by encapsulating your processing 
task. It is the one that will be executed on the target node, taking control over your 
processing task execution, performing the following actions:

- The wrapper script first performs some sanity checks. It looks for the ``Kind`` dictionary 
  key into its first argument, which must be a *base64-encoded serialized Python dictionary* 
  (remember the ``YOUPI_USER_DATA`` variable in the previous section?). If not found, a 
  ``WrapperError`` Python exception is raised, thus terminating the processing. This keyword 
  is mandatory because it allows the wrapper script to take special action depending on 
  ``Kind``'s associated value. Youpi's built-in plugins use the ``Plugin.id`` data member for 
  the ``Kind`` keyword.

  In order to know if a *processing kind* is available, Youpi maintains a ``youpi_processing_kind`` 
  table with some information about registered plugins. Again, if ``Kind``'s associated value 
  does not match any of that table's entries, a ``WrapperError`` Python Exception is raised; 
  the wrapper script is aborted.

- The wrapper script then call its ``process()`` function, passing it the ``userData`` 
  Python dictionary and the remaining command line arguments. This function

  1. inserts an entry in the ``youpi_processing_task`` table, filling the information 
     related to the node's hostname, the Django's user ID, the processing kind and 
     starting date.

  2. executes the command line arguments - your real processing stuff - in a subshell 
     and waits for the shell to finish executing the command. It then saves the exit 
     status of the shell.

  3. performs some custom actions depending on your ``Kind``'s keyword value. This is 
     where you can enhance the wrapper script to ``add support for your plugin``.

  4. updates the ``youpi_processing_task`` table with the error log content if the 
     processing was not successful (content is compressed and base64-encoded), fills 
     the ``end_date`` and ``success`` data fields.

Once your processing is over, the wrapper script exits, the job terminates and is removed 
from Condor's queue.

.. figure:: figures/function_calls.svg
   :width: 800pt


Mandatory Data Members
======================

Before you can start writing your brand new plugin, you must be aware that some variables - 
your class' data members - are needed in order to make Youpi behave the way you expected. 

For example, to prevent registration of non plugin-related code, some sanity checks are 
performed to ensure that imported modules are conforming to the expected plugin infrastructure. 
Those sanity checks need to access specific data members in every plugin's code, thus 
making some data members mandatory at plugin's registration time. 

Other mandatory data members are accessed by core - mainly HTML templates - files. 
The following figure provides some information about those dependencies. Core Youpi
files (with rounded diamond shape) need some Python data members, thus making their 
definition at plugin level mandatory.

.. figure:: figures/mandatory_vars.svg
   :width: 800pt

Mandatory Python data members are:

enable
	Boolean that states whether a plugin should be registered by the |pm| making it 
	available for the entire application. Set ``enable`` to ``False`` if you want to 
	disable a plugin, making it unavailable for the entire site.

	Every plugin inherits the ``YoupiPlugin`` class (defined in ``pluginmanager.py``) 
	which defines an ``enable`` data member with a value that defaults to ``True``.

id
	String that identifies a plugin uniquely. Two plugins can't have the same id. If some 
	internal names collide, the |pm| aborts plugins loading and raises a ``PluginManagerError``
	Python exception. If you dive into some parts of the code of existing plugins, you may 
	see that this ``id`` string is used quite intensively in templates - files whose content is 
	dynamically substituted at runtime by Django -  for prefixing variable or function names. 
	This is useful when dealing with Javascript code since this technique allows to easily deal 
	with the lack of robust native namespace support. The only file referencing the ``id`` 
	variable is ``pluginmanager.py``.

index
	Integer used by the |pm| at loadtime to visually sort submenus (one submenu per plugin) 
	on the processing web page. The plugin that comes with the smaller index gets displayed 
	first (from left to right) on the screen. Note that two plugins may have the same index 
	but this will have no effect on the resulting order (the sort algorithm is fairly simple 
	and does not do anything special in that case). Again, the only file referencing the 
	``index`` variable is ``pluginmanager.py``.

optionLabel
	String used by the |pm| to set a plugin's menu item title on the processing page. Note 
	that no particular checks are performed so that plugins with the same ``optionLabel``
	value will have the same menu title, which is not what you might want. This variable 
	is referenced by three template files: ``processing.html``, ``plugin_default.html``
	and ``processingcart.html``.

description
	Short inline string used to display some plugin's general action. Youpi uses this 
	variable to name the low-level program that really does the job. While the ``optionLabel`` 
	variable should hold a rather general option name, the ``description`` data member should 
	be used to define more accurate, lower level kind of information. This variable is 
	referenced by the templates files ``processing.html`` and ``processingcart.html``.

itemPrefix
	String used at the processing cart level to add a custom prefix to items' names in the 
	cart. The only file referencing this variable is the ``processingcart.html`` template.

template
	String used to specify the Django template file to use for custom HTML rendering on 
	the processing page.  This file is the critical part of any plugin's client-side code. 
	Since its content is processed by the Django's template rendering engine, any template 
	tags and filters can be used within the file and, of course, server-side context 
	variables are substituted before rendering. The only file referencing this variable is 
	the ``processing.html`` template.

	Please note that, technically speaking, the ``template`` data member is not mandatory. 
	When Django renders the ``processing.html`` template, it tries to include - for every 
	registered plugin - the HTML template referenced by the ``template`` plugin's data 
	member. In ``processing.html``, the (simplified) substitution code looks like the 
	following::

		{% for plugin in plugins %}
		<div>{% include plugin.template %}</div>
		{% endfor %}

	The ``YoupiPlugin`` class defines a generic ``template`` data member with a value 
	that defaults to the file ``plugin_default.html``. So if you forget to provide a 
	``template`` data member to your custom plugin, this default HTML template will be 
	used instead, reminding you that you certainly missed something. 

itemCartTemplate
	String defining a Django HTML template that will be included into the processing cart 
	template for custom rendering. This is where you decide what your plugin's related 
	items will look like and behave on the processing cart page. The only file referencing 
	this variable is the ``processingcart.html`` template.

jsSource
	String used to specify a filename containing some custom JavaScript source code for 
	your plugin. Even if you don't have any JavaScript code to put into this file right 
	now, it is a good practice to create an empty file and set up your ``jsSource`` data 
	member accordingly. Indeed, core templates files such as ``processingcart.html`` *will* 
	try to include every plugin's external JavaScript code::

		{# Load custom plugin's javascript code when needed #}
		{% for plugin in plugins %}
		{% include plugin.jsSource %}
		{% endfor %}

	The ``jsSource`` variable is referenced by three template files: ``processingcart.html``, 
	``results.html`` and ``single_results.html``.

