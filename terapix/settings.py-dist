##############################################################################
#
# Copyright (c) 2008-2009 Terapix Youpi development team. All Rights Reserved.
#                    Mathias Monnerville <monnerville@iap.fr>
#                    Gregory Semah <semah@iap.fr>
#
# This program is Free Software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
##############################################################################

# Base Django settings for terapix project.
# Parts of it can be overwritten by creating a local_conf.py file
# which is imported at the end of this file.
#
# FIXME: This is a -dist file that must be filled with you
# FIXME: own values. Lines that require a modification end 
# with a FIXME comment.

import os, os.path, socket


##########################################################################################################
#
# You will certainly need to overwrite those variables to match your local site configuration
#
##########################################################################################################


# ImageMagick support
#
HAS_CONVERT 		= True
CMD_CONVERT			= '/path/to/convert'			# FIXME
#
CMD_STIFF			= '/path/to/stiff'				# FIXME
CMD_IMCOPY			= '/path/to/imcopy'				# FIXME

PROCESSING_OUTPUT 	= '/output/path/for/results/'	# FIXME
FTP_URL 			= 'ftp://hostname/'				# FIXME
# Path to the condor_transfer.pl Perl script
CMD_CONDOR_TRANSFER	= '/path/to/condor_transfer'	# FIXME
# Custom options to CMD_CONDOR_TRANSFER passed on the command line
CONDOR_TRANSFER_OPTIONS	= ''
CMD_FITSVERIFY		= '/path/to/fitsverify'			# FIXME

# Used to build URI to QFITS html data path (image name + 'qualityFITS' directory
# will be appended). 
# Ex: http://clix.iap.fr:9000/893265p_04/qualityFITS/ will be used 
# for image '893265p_04.fits'.
WWW_FITSIN_PREFIX 	= 'http://web_hostname/'		# FIXME
WWW_SCAMP_PREFIX 	= WWW_FITSIN_PREFIX
WWW_SWARP_PREFIX 	= WWW_FITSIN_PREFIX
WWW_SEX_PREFIX 		= WWW_FITSIN_PREFIX

# Administrators: put your name and email to receive notifications
# when a problem occurs
ADMINS = (
    # ('Your Name', 'your_email@domain.com'),
)

# Embedded file browsers settings
FILE_BROWSER_HEADER_TITLE = 'Path Browser'
FILE_BROWSER_ROOT_TITLE = 'Local Filesystem'
FILE_BROWSER_ROOT_DATA_PATH = '/path/to/root/directory'	# FIXME
# INGESTION_HOST_PATTERN is a regular expression that will be checked when 
# you want to ingest images to determine the target hostname (which must be 
# a cluster node). Ingestions are made on the node where the data belong.
# You must use only one set of parenthesis aka '()' and Youpi will look for 
# a match in the complete path to your input images. Thus, the FILE_BROWSER_ROOT_DATA_PATH 
# will be substracted from the current path to data before apply your host pattern.
INGESTION_HOST_PATTERN = r'^/(.*?)/.*$'			# FIXME
# If INGESTION_HOST_PATTERN matches, a real hostname will be searched to use it as 
# a Condor requirement target machine. Suppose your path to input images is like
# '/path/to/root/directory/host5/testing/megacam/'. You should set your 
# INGESTION_HOST_PATTERN to '(.*?)/.*$' in order to match 'host5'. Then you can set
# your hosts mapping to {'host5': 'host5.mydomain.org'}. Keys can be also be declared as 
# regexps (i.e. {r'host.*': '\1.mydomain.org'}. In this case, \1 matches the current 
# hostname value matched.
INGESTION_HOSTS_MAPPING = {}					# FIXME
# If no match is found, INGESTION_DEFAULT_HOST is used as a Condor requirement 
# target machine (fqdn)
INGESTION_DEFAULT_HOST = socket.gethostname() # FIXME
# Set to False to disable sending mail at the end of the ingestion
INGESTION_SEND_MAIL = True
INGESTION_MAIL_FROM = 'youpi-bot@your.domain'	# FIXME
# Email sent when a job fails
CONDOR_NOTIFY_USER = 'youremail@your.domain' # FIXME

# MySQL settings
DATABASE_NAME 		= 'dbname'						# FIXME
DATABASE_USER 		= 'user'						# FIXME 
DATABASE_PASSWORD 	= 'pass'						# FIXME
DATABASE_HOST 		= 'localhost'					# FIXME. Set to empty string for localhost
DATABASE_PORT 		= ''             				# Set to empty string for default

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be avilable on all operating systems.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE 			= 'Europe/Paris'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE 		= 'en-us'

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL 			= '/media/'
# Path to your Youpi installation
TRUNK			= '/path/to/youpi/installation/dir/'			# FIXME


##########################################################################################################
#
# The remaining of the file can be left unchanged, unless you know what you are doing
#
##########################################################################################################


DEBUG = False
TEMPLATE_DEBUG = DEBUG
MANAGERS = ADMINS
MAINTENANCE= False

#
# Site-wide plugin activation
# Plugin files are located in the terapix.youpi.plugins package
# To activate a plugin, add its name to the tuple (without the .py extension)
YOUPI_ACTIVE_PLUGINS = ('qualityfitsin', 'scamp', 'swarp', 'sextractor')

APP_URL_PREFIX  = '/youpi'
AUP				= APP_URL_PREFIX 	# For short

# Log files used during image ingestion 
# with Condor 
CONDORFILE 		= '/tmp/condor_ingestion_submit'
CONDOR_OUTPUT 	= '/tmp/condor_ingestion.out'
CONDOR_ERROR 	= '/tmp/condor_ingestion.error'
CONDOR_LOG 		= '/tmp/condor_ingestion.log'
CONDOR_LOG_DIR	= '/tmp'

# MySQL settings
# Warning: Youpi has been tested only with MySQL
DATABASE_ENGINE 	= 'mysql' 
DATABASE_OPTIONS 	= {"init_command": "SET storage_engine=INNODB"}

# Plugins configuration files directory
#
PLUGINS_CONF_DIR = os.path.join(TRUNK, 'terapix', 'youpi', 'plugins', 'conf')

# Image Magick
#
CONVERT_THUMB_OPT 	= '-resize 60x' # Default thumbnail size width: 60px
CMD_CONVERT_THUMB	= "%s %s" % (CMD_CONVERT, CONVERT_THUMB_OPT)
#
IMS_MAX_PER_PAGE	= 50

# condor_transfer.pl env var used to know where to transfer data 
# back
TPX_CONDOR_UPLOAD_URL = FTP_URL + PROCESSING_OUTPUT

# FIXME: move code
class FileNotFoundError(Exception): pass
def findPath(file):
	for path in os.environ['PATH'].split(':'):
		abspath = os.path.join(path, file)
		if os.path.exists(abspath):
			if os.path.isfile(abspath):
				return path

	raise FileNotFoundError, "File %s not found in paths: %s" % (file, os.environ['PATH'])

# Looks for the condor_q path in the PATH 
# env variable
CONDOR_BIN_PATH = findPath('condor_q')

# Software info (to get versioning information)
#
CMD_SCAMP			= 'scamp'
CMD_SWARP			= 'swarp'
CMD_SEX				= 'sex'
SOFTS = (	('Condor', 		os.path.join(CONDOR_BIN_PATH, 'condor'), 		# command
							'-v',							# argument to version version information 
							'Version: (.*?) \w'),			# RegExp to retreive version number only
			('MissFITS',	'missfits', 
							'-v', 
							'version (.*?) \('),
			('PSFEx',		'psfex', 
							'-v', 
							'version (.*?) \('),
			('QualityFITS', 'qualityFITS', 
							'-V', 
							'version (.*?) conf'),
			('Sextractor', 	CMD_SEX,
							'-v', 
							'version (.*?) \('),
			('Scamp', 		CMD_SCAMP,
							'-v', 
							'version (.*?) \('),
			('Swarp', 		CMD_SWARP,
							'-v', 
							'version (.*?) \('),
			('WeightWatcher',	'ww', 
							'-v', 
							'version (.*?) \(')
		)

# Custom login/logout URLS
LOGIN_URL = '/youpi/accounts/login/'
LOGOUT_URL = '/youpi/accounts/logout/'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# Absolute path to the directory that holds media.
# Example: "/home/media/media.lawrence.com/"
MEDIA_ROOT = os.path.join(TRUNK, 'terapix', 'media')
# Worldwide writable directory to store content accessible under MEDIA_ROOT
MEDIA_TMP = 'pubtmp'

# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
# Examples: "http://foo.com/media/", "/media/".
ADMIN_MEDIA_PREFIX = '/media/'

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'youpiu*!)^6fu)jp-(q%d4r-n&ynpx9_xs)48+t)6tv#o)!0e(aw6js'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
#     'django.template.loaders.eggs.load_template_source',
)

# Django default processors + custom ones from Youpi
TEMPLATE_CONTEXT_PROCESSORS = (
	'django.core.context_processors.auth',
	'django.core.context_processors.debug',
	'django.core.context_processors.i18n',
	'django.core.context_processors.media',
	'django.core.context_processors.request',
	'terapix.youpi.context_processors.appmenu',
	'terapix.youpi.context_processors.settings',
	'terapix.youpi.context_processors.version',
)

MIDDLEWARE_CLASSES = (
	'django.middleware.gzip.GZipMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.doc.XViewMiddleware',
	'terapix.middleware.MaintenanceModeMiddleware',
)

ROOT_URLCONF = 'terapix.urls'

TEMPLATE_DIRS = os.path.join(TRUNK, 'terapix','templates')

INSTALLED_APPS = (
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.sites',
	'django.contrib.admin',
	'terapix.compress',
	'terapix.django_evolution',
	'terapix.youpi',
)

SESSION_SAVE_EVERY_REQUEST = True

AUTH_PROFILE_MODULE = 'youpi.siteprofile'

# 
# django-compress app setup
# 
COMPRESS_VERSION = True
COMPRESS_CSS_FILTERS = ['compress.filters.yui.YUICompressorFilter']
COMPRESS_JS_FILTERS = COMPRESS_CSS_FILTERS

COMMON_JS = [
	'js/3rdParty/scriptaculous/prototype.js', 
	'js/3rdParty/scriptaculous/scriptaculous.js', 
	'js/3rdParty/scriptaculous/builder.js',
	'js/3rdParty/scriptaculous/effects.js', 
	'js/3rdParty/scriptaculous/dragdrop.js', 
	'js/processingcart.js', 
	'js/common.js', 
	'js/xhr.js',
	'js/menu.js',
]
#
HOME_JS = COMMON_JS[:]
HOME_JS.extend(['js/progressbar.js', 'js/sqlform.js'])
#
INGESTION_JS = COMMON_JS[:]
INGESTION_JS.extend([
	'js/3rdParty/autoSuggest/bsn.AutoSuggest_c_2.0.js', 
	'js/3rdParty/tafelTree/Tree.js', 
	'js/tooltip.js', 
	'js/ingestion.js', 
	'js/filebrowser.js',
])
#
TAGS_JS = COMMON_JS[:]
TAGS_JS.extend([
	'js/stylepicker.js', 
	'js/tagwidget.js', 
	'js/tagpanel.js', 
	'js/imageinfowidget.js', 
	'js/imageselector.js', 
	'js/pageswitcher.js', 
	'js/advancedtable.js',
	'js/3rdParty/lightbox2/lightbox.js', 
	'js/3rdParty/modalbox/modalbox.js', 
	'js/3rdParty/autoSuggest/bsn.AutoSuggest_c_2.0.js',
])
#
PROCESSING_JS = COMMON_JS[:]
PROCESSING_JS.extend(['js/3rdParty/tafelTree/Tree.js'])
#
PROCPLUGIN_JS = COMMON_JS[:]
PROCPLUGIN_JS.extend([
	'js/3rdParty/tafelTree/Tree.js',
	'js/3rdParty/modalbox/modalbox.js',
	'js/progressbar.js',
	'js/sqlform.js',
	'js/imageinfowidget.js',
	'js/imageselector.js',
	'js/filebrowser.js',
	'js/3rdParty/windows/js/window.js',
	'js/lightfilebrowser.js',
	'js/configfilewidget.js',
	'js/pathselectorwidget.js',
	'js/pageswitcher.js',
	'js/advancedtable.js',
	'js/3rdParty/autoSuggest/bsn.AutoSuggest_c_2.0.js',
])
#
RESULTS_JS = COMMON_JS[:]
RESULTS_JS.extend([
	'js/gradingwidget.js',
	'js/processinghistorywidget.js',
	'js/pageswitcher.js',
	'js/3rdParty/lightbox2/lightbox.js',
	'js/3rdParty/modalbox/modalbox.js',
	'js/progressbar.js',
])
#
REPORTING_JS = COMMON_JS[:]
REPORTING_JS.extend([
	'js/gradingwidget.js',
	'js/processinghistorywidget.js',
	'js/progressbar.js',
])
#
CART_JS = COMMON_JS[:]
CART_JS.extend([
	'js/3rdParty/modalbox/modalbox.js',
	'js/condorpanel.js',
	'js/accordion.js',
])
#
CONDOR_JS = COMMON_JS[:]
CONDOR_JS.extend([
	'js/advancedtable.js',
	'js/condorpanel.js',
	'js/clusterpolicywidget.js',
	'js/3rdParty/autoSuggest/bsn.AutoSuggest_c_2.0.js',
])
#
PREF_JS = COMMON_JS[:]
PREF_JS.extend([
	'js/condorpanel.js',
	'js/3rdParty/modalbox/modalbox.js',
])
#
REPORT_JS = COMMON_JS[:]
REPORT_JS.extend([
	'js/3rdParty/flotr/lib/canvas2image.js',
	'js/3rdParty/flotr/lib/canvastext.js',
	'js/3rdParty/flotr/flotr-0.2.0-alpha.js',
])
#
GRADEPANEL_JS = COMMON_JS[:]
GRADEPANEL_JS.extend([
	'js/gradingwidget.js',
])
#
SINGLERESULT_JS = COMMON_JS[:]
SINGLERESULT_JS.extend([
	'js/gradingwidget.js',
	'js/3rdParty/lightbox2/lightbox.js',
])

COMPRESS_JS = {
	'default'		: { 'source_filenames': COMMON_JS, 'output_filename': 'js/default.r?-min.js' },
	'home'			: { 'source_filenames': HOME_JS, 'output_filename': 'js/home.r?-min.js' },
	'ingestion'		: { 'source_filenames': INGESTION_JS, 'output_filename': 'js/ingestion.r?-min.js' },
	'tags'			: { 'source_filenames': TAGS_JS, 'output_filename': 'js/tags.r?-min.js' },
	'processing'	: { 'source_filenames': PROCESSING_JS, 'output_filename': 'js/processing.r?-min.js' },
	'procplugin'	: { 'source_filenames': PROCPLUGIN_JS, 'output_filename': 'js/procplugin.r?-min.js' },
	'monitoring'	: { 'source_filenames': COMMON_JS, 'output_filename': 'js/monitoring.r?-min.js' },
	'results'		: { 'source_filenames': RESULTS_JS, 'output_filename': 'js/results.r?-min.js' },
	'reporting'		: { 'source_filenames': REPORTING_JS, 'output_filename': 'js/reporting.r?-min.js' },
	'cart'			: { 'source_filenames': CART_JS, 'output_filename': 'js/cart.r?-min.js' },
	'condor'		: { 'source_filenames': CONDOR_JS, 'output_filename': 'js/condor.r?-min.js' },
	'preferences'	: { 'source_filenames': PREF_JS, 'output_filename': 'js/pref.r?-min.js' },
	'doc'			: { 'source_filenames': COMMON_JS, 'output_filename': 'js/doc.r?-min.js' },
	'genreport'		: { 'source_filenames': COMMON_JS, 'output_filename': 'js/genreport.r?-min.js' },
	'report'		: { 'source_filenames': REPORT_JS, 'output_filename': 'js/report.r?-min.js' },
	'gradepanel'	: { 'source_filenames': GRADEPANEL_JS, 'output_filename': 'js/gradepanel.r?-min.js' },
	'imageinfo'		: { 'source_filenames': COMMON_JS, 'output_filename': 'js/imageinfo.r?-min.js' },
	'singleresult'	: { 'source_filenames': SINGLERESULT_JS, 'output_filename': 'js/singleres.r?-min.js' },
	'softsv'		: { 'source_filenames': COMMON_JS, 'output_filename': 'js/softsv.r?-min.js' },
}

#
DEFAULT_CSS = [
	'themes/default/css/dashboard.css', 
	'themes/default/css/layout.css', 
	'themes/default/css/global.css', 
	'themes/default/css/patch-iewin.css', 
	'themes/default/css/menu.css',
]
#
ING_CSS = DEFAULT_CSS[:]
ING_CSS.extend([
	'themes/default/css/history.css', 
	'js/3rdParty/autoSuggest/css/autosuggest_inquisitor.css', 
	'js/3rdParty/tafelTree/css/tree.css', 
	'themes/default/css/tooltip.css',
])
#
TAGS_CSS = DEFAULT_CSS[:]
TAGS_CSS.extend([
	'js/3rdParty/lightbox2/css/lightbox.css',
	'js/3rdParty/modalbox/modalbox.css',
	'js/3rdParty/autoSuggest/css/autosuggest_inquisitor.css',
])
#
PROCESSING_CSS = DEFAULT_CSS[:]
PROCESSING_CSS.extend([
	'js/3rdParty/tafelTree/css/tree.css',
	'themes/default/css/tooltip.css',
])
#
PROCPLUGIN_CSS = DEFAULT_CSS[:]
PROCPLUGIN_CSS.extend([
	'js/3rdParty/tafelTree/css/tree.css',
	'themes/default/css/tooltip.css',
	'js/3rdParty/modalbox/modalbox.css',
	'js/3rdParty/windows/themes/default.css',
	'js/3rdParty/windows/themes/alphacube.css',
	'js/3rdParty/autoSuggest/css/autosuggest_inquisitor.css',
])
#
RESULTS_CSS = DEFAULT_CSS[:]
RESULTS_CSS.extend([
	'js/3rdParty/lightbox2/css/lightbox.css',
	'js/3rdParty/modalbox/modalbox.css',
])
#
CART_CSS = DEFAULT_CSS[:]
CART_CSS.extend([
	'themes/default/css/history.css',
	'js/3rdParty/modalbox/modalbox.css',
	'themes/default/css/accordion.css',
])
#
CONDOR_CSS = DEFAULT_CSS[:]
CONDOR_CSS.extend([
	'themes/default/css/tooltip.css',
	'js/3rdParty/autoSuggest/css/autosuggest_inquisitor.css',
])
#
PREF_CSS = DEFAULT_CSS[:]
PREF_CSS.extend([
	'themes/default/css/history.css',
	'js/3rdParty/modalbox/modalbox.css',
])
#
SINGLERES_CSS = DEFAULT_CSS[:]
SINGLERES_CSS.extend([
	'js/3rdParty/lightbox2/css/lightbox.css',
])
#
LOGIN_CSS = DEFAULT_CSS[:]
LOGIN_CSS.extend([
	'themes/default/css/login.css',
])

COMPRESS_CSS = {
	'default'		: { 'source_filenames': DEFAULT_CSS, 'output_filename': 'themes/default/css/default.r?-min.css' },
	'ingestion'		: { 'source_filenames': ING_CSS, 'output_filename': 'themes/default/css/ingestion.r?-min.css' },
	'tags'			: { 'source_filenames': TAGS_CSS, 'output_filename': 'themes/default/css/tags.r?-min.css' },
	'processing'	: { 'source_filenames': PROCESSING_CSS, 'output_filename': 'themes/default/css/processing.r?-min.css' },
	'procplugin'	: { 'source_filenames': PROCPLUGIN_CSS, 'output_filename': 'themes/default/css/procplugin.r?-min.css' },
	'monitoring'	: { 'source_filenames': DEFAULT_CSS, 'output_filename': 'themes/default/css/monitoring.r?-min.css' },
	'results'		: { 'source_filenames': RESULTS_CSS, 'output_filename': 'themes/default/css/results.r?-min.css' },
	'reporting'		: { 'source_filenames': DEFAULT_CSS, 'output_filename': 'themes/default/css/reporting.r?-min.css' },
	'report'		: { 'source_filenames': DEFAULT_CSS, 'output_filename': 'themes/default/css/report.r?-min.css' },
	'cart'			: { 'source_filenames': DEFAULT_CSS, 'output_filename': 'themes/default/css/cart.r?-min.css' },
	'condor'		: { 'source_filenames': CONDOR_CSS, 'output_filename': 'themes/default/css/condor.r?-min.css' },
	'preferences'	: { 'source_filenames': PREF_CSS, 'output_filename': 'themes/default/css/prefs.r?-min.css' },
	'singleresult'	: { 'source_filenames': SINGLERES_CSS, 'output_filename': 'themes/default/css/singleres.r?-min.css' },
	'login'			: { 'source_filenames': LOGIN_CSS, 'output_filename': 'themes/default/css/login.r?-min.css' },
}

# Override all FIXME sections with your values.
# This file can be empty
from local_conf import *
